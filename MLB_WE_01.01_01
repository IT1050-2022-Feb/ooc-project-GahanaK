//Definition of Reservation Class
class Reservation{
	protected:
		string type;
		string location;
		float price;
		
	public:
		Reservation();
		Reservation(string rType, string rLoc, float price);
		void makeReservation();
		void updateReservation();
		~Reservation();
};

//Default Constructor
Reservation::Reservation()
{
	strcpy(type, "");
	strcpy(location, "");
	price = 0.00;
}

//Constructor with parameters
Reservation::Reservation(string rType, string rLoc, float price)
{
	strcpy(type, rType);
	strcpy(location, rLoc);
	price = 0.00;
}

//Definition of booking class
class Booking : public Reservation{
	protected:
		string BID;
		
	public:
		Booking();
		Booking(string bno);
		void displayBooking();
		~Booking();
};

//Default Constructor
Booking::Booking()
{
	strcpy(BID, "");
}

//Constructor with Parameters
Booking::Booking(string bno)
{
	strcpy(BID, bno); 	
}

//Definition of Offer class
class Offer : public Reservation{
	protected:
		string OID;
		
	public:
		Offer();
		Offer(ono);
		void displayOffer();
		~Offer();
};

//Default Constructor
Offer::Offer()
{
	strcpy(OID, "");
}

//Constructor with parameters
Offer::Offer(ono)
{
	strcpy(OID, ono);
}

//Definition of Customer Class
class Customer{
	private:
		string CID;
		string name;
		string address;
		string DOB;
		int mobile;
		string email;
		
	public:
		Customer();
		Customer(string cno, string cName, string cAddress, string CDOB, int cMobile, string cEmail);
		void displayDetails();
		void editProfile();
		void makePayment();
		~Customer;
};

//Default Constructor
Customer::Customer()
{
	strcpy(CID, "");
	strcpy(name, "");
	strcpy(address, "");
	strcpy(DOB, "");
	mobile = 0;
	strcpy(email, "");
	
}

//Constructor with Parameters
Customer::Customer(string cno, string cName, string cAddress, string CDOB, int cMobile, string cEmail)
{
	strcpy(CID, cno);
	strcpy(name, cName);
	strcpy(address, cAddress);
	strcpy(DOB, CBOD);
	mobile = cMoile;
	strcpy(email, cEmail);
}

//Defiition of Payment class
class Payment{
	protected :
		string PID;
		float amount;
		string date;
	public:
		Payment();
		Payment(string pno, float amt, string pDate);
		void displayPayments();
		void validPayment();
		void display payment();
		~Payment();
};

//Default Constructor
Payment:: Payment()
{
	strcpy(PID, "");
	amount = 0.00;
	strcpy(date, "");
}

//Constructors with Parameters
Payment:: Payment
{
	strcpy(PID, pno);
	amount = amt
	strcpy(date, pDate);
}

//Definition of Card class
class Card : public Payment{
	protected:
		int cardno;
		string type;
		string holdername;
    	string expirydate;
		
	public:
		Card();
		Card(int card, string cType, string chName, string expdate);
		void displayCard();
		~Card();
};

//Default Constructor
Card::Card()
{
	cardno = 0;
	strcpy(type, "");
	strcpy(holdername, "");
	strcpy(expirydate, "");
}

//Constructor with Parameter
Card::Card(int card, string cType, string chName, string expdate)
{
	cardno = card;
	strcpy(type, cType);
	strcpy(holdername, chName);
	strcpy(expirydate, expdate);	
}


//Definition of Employee Class
class Employee{
	private:
		string EID;
		string name;
		int mobile;
		int evaluationscore;
		
	public:
		Employee();
		Employee(string eno, string eName, int mno, int score);
		void displayEmpDetails();
		void viewReservation();
		~Employee();
};

//Default Constructor
Employee::Employee()
{
	strcpy(EID, "");
	strcpy(name, "");
	mobile = 0;
	evaluationscore = 0;
}

//Constructor with parameters
Employee::Employee(string eno, string eName, int mno, int score)
{
	strcpy(EID, eno);
	strcpy(name, eName);
	mobile = mno;
	evaluationscore = score;
}

//Definition of Feedback Class

class Manager{
	private:
		string MID;
		string name;
		int mobile
		
	public:
		Manager();
		Manager(string mno, sting mName, int mContact);
		void displayManager();
		void calculateEmployeePerformance();
		~Manager();
};

//Default Constructor
Manager::Manager()
{
	strcpy(MID, "");
	strcpy(name, "");
	mobile = 0;	
}

//Constructor with Parameters
Manager::Manager(string mno, sting mName, int mContact)
{
	strcpy(MID, mno);
	strcpy(name, mName);
	mobile = mContact;
}

//Definition of TourGuide Class
class TourGuide{
	private:
		string TID;
		string name;
		int mobile;
		
	public:
		TourGuide();
		TourGuide(string tno, string tname, int tMobile);
		void viewRequest();
		~TourGuide();
};

//Default Constructors
TourGuide::TourGuide()
{
	strcpy(TID, "");
	strcpy(name, "");
	mobile = 0;
}

//Constructors with parameters
TourGuide:: TourGuide(string tno, string tname, int tMobile)
{
	strcpy(TID, tno);
	strcpy(name, tname);
	mobile = tMobile;
}

class Feedback{
	private:
		string FID;
		
	public:
		Feedback();
		Feedback(string fno);
		void displayFeedback();
		void replyFeedback();
		void viewFeedback();
		~Feedback();
};

//Default Constructor
Feedback::Feedback()
{
	strcpy(FID, "");
}

//Constructor with Parameters
Feedback::Feedback(string fno)
{
	strcpy(FID, fno);
}




//Code for client program
#include<iostream>
#include<cstring>
#define SIZE 10

#include "Booking.h"
#include "Card.h"
#include "Customer.h"
#include "Employee.h"
#include "Feedback.h"
#include "Manager.h"
#include "Package.h"
#include "Payment.h"
#include "Reservation.h"
#include "SeasonalOffer.h"
#include "TourGuide.h"

using namespace std;

int main()
{
	Booking B1;
	Booking B2("B001");
	
	Card C1;
	Card C2("C1234", "Debit", "Nimal", "18/11/2025");
	
	Customer RC1;
	Customer RC2("RC001", "Nimal", "Kandy", "10/01/2002", 0763654545, "nimal@gmial.com");
	
	Employee E1;
	Employee E2("E001", "Chathura", 0778965412 , 5);
	
	Feedback F1;
	Feedback F2(F001);
	
	Manager M1;
	Manager M2("M001", "Dimeth", 0778546123);
	
	Package PK1;
	Package PK2("PK001");
	
	Payment P1;
	Payment P2("P001", 10000.00, "10/05/2022");
	
	Reservation R1;
	Reservation R2("R001", "Booking", 10000.00);
	
	Offer O1;
	Offer O2("O001")
	
	TourGuide T1;
	TourGuide T2("T001", "Sunil", 0774561232)
	
	return 0;
}
